package leetcode

// 135. 分发糖果
// n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。

// 你需要按照以下要求，给这些孩子分发糖果：

// 每个孩子至少分配到 1 个糖果。
// 相邻两个孩子评分更高的孩子会获得更多的糖果。
// 请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。

// 示例 1：

// 输入：ratings = [1,0,2]
// 输出：5
// 解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。
// 示例 2：

// 输入：ratings = [1,2,2]
// 输出：4
// 解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。
//      第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。

// 提示：

// n == ratings.length
// 1 <= n <= 2 * 104
// 0 <= ratings[i] <= 2 * 104

func candy(ratings []int) int {
	// 思路 : 两次遍历 一次从左到右，一次从右到左
	var ans int
	n := len(ratings)
	nums := make([]int, n)

	nums[0] = 1
	for i := 1; i < n; i++ {
		// 从左向右遍历 如果相邻右边孩子评分大于左边 则右边孩子糖果数等于左边孩子的糖果数量加一
		if ratings[i] > ratings[i-1] {
			nums[i] = nums[i-1] + 1
		} else {
			nums[i] = 1
		}

	}

	// 第二次遍历 从右向左遍历 如果相邻左边孩子评分大于右边 并且拥有的糖果数还低于右边 则要在右边孩子的糖果数上加一作为左边孩子应该获得的糖果数
	for i := n - 2; i >= 0; i-- {
		if ratings[i] > ratings[i+1] && nums[i] <= nums[i+1] {
			nums[i] = nums[i+1] + 1
		}
	}

	for _, v := range nums {
		ans += v
	}

	return ans

}
